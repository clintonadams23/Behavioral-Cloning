import csv
import cv2
import matplotlib.pyplot as plt
import numpy as np
from keras.layers import Cropping2D, Dense, Dropout, Flatten, Lambda
from keras.layers.convolutional import Convolution2D
from keras.layers.pooling import MaxPooling2D
from keras.models import Sequential 

def get_images(line):
    "Reads in center, left, and right images from a line in the driving data. It also adds a flipped version of the center image"
    images = [cv2.imread(line[i]) for i in range(3)]
    images.append(cv2.flip(images[0], 1))
    return images

def get_steering_measurements(line, correction_factor = 0.2):
    """Reads in the steering measurement from a line in the driving data. It creates left and right steering measurements
    by adding a correction factor to compensate for the angle. It also adds a reversed steering measurement corresponding 
    to a reversed image"""
    center = float(line[3])
    return [center, center + correction_factor, center - correction_factor, -1 * center]
    
def get_training_data():
    "Extracts training data and labels from a driving log generated by a simulator"
    images = []
    measurements = []
    with open('./driving_log.csv') as csvfile:
        for line in csv.reader(csvfile):
            images.extend(get_images(line))
            measurements.extend(get_steering_measurements(line))
    return np.array(images), np.array(measurements)

def get_model():    
    model = Sequential()
    model.add(Cropping2D(cropping=((70,25), (0,0)), input_shape=(160,320,3)))
    model.add(Lambda(lambda x: x/ 255.0 - 0.5))
    model.add(Convolution2D(24, 5, 5, subsample=(2,2), activation="relu"))
    model.add(Convolution2D(36, 5, 5, subsample=(2,2), activation="relu"))
    model.add(Convolution2D(48, 5, 5, subsample=(2,2), activation="relu"))
    model.add(Convolution2D(64, 3, 3, activation="relu"))
    model.add(Convolution2D(64, 3, 3, activation="relu"))
    model.add(Flatten())
    model.add(Dense(100))
    model.add(Dense(50))
    model.add(Dense(10))
    model.add(Dense(1))
    return model

x_train, y_train = get_training_data()
model = get_model()
model.compile(loss='mse', optimizer='adam')
model.fit(x_train, y_train, validation_split=0.3, shuffle=True, nb_epoch=5, verbose=1)
model.save('model.h5')